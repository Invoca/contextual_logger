#!/usr/bin/groovy
@Library('jenkins-pipeline@v0.4.5')
import com.invoca.docker.*;
pipeline {
  agent {
    kubernetes {
      defaultContainer "ruby"
      yamlFile ".jenkins/ruby_build_pod.yml"
    }
  }

  environment { GITHUB_TOKEN = credentials('github_token') }

  stages {
    stage('Setup') {
      steps {
        script {
          updateGitHubStatus('clean-build', 'pending', 'Unit tests.')
          sh 'bundle install'
          sh 'bundle exec appraisal install'
        }
      }
    }
    stage('Appraisals') {
      parallel {
        stage('Current') {
          steps {
            sh 'bundle exec rspec --format RspecJunitFormatter --out spec/reports/current/rspec.xml'
          }

          post {
            always { junit 'spec/reports/current/*.xml' }
          }
        }

        stage('Rails 4') {
          steps {
            sh 'bundle exec appraisal rails-4 rspec --format RspecJunitFormatter --out spec/reports/rails4/rspec.xml'
          }

          post {
            always { junit 'spec/reports/rails4/*.xml' }
          }
        }

        stage('Rails 5') {
          steps {
            sh 'bundle exec appraisal rails-5 rspec --format RspecJunitFormatter --out spec/reports/rails5/rspec.xml'
          }

          post {
            always { junit 'spec/reports/rails5/*.xml' }
          }
        }

        stage('Rails 6') {
          steps {
            sh 'bundle exec appraisal rails-6 rspec --format RspecJunitFormatter --out spec/reports/rails6/rspec.xml'
          }

          post {
            always { junit 'spec/reports/rails6/*.xml' }
          }
        }
      }

      post {
        success { updateGitHubStatus('clean-build', 'success', 'Unit tests.') }
        failure { updateGitHubStatus('clean-build', 'failure', 'Unit tests.') }
      }
    }
  }
}

void updateGitHubStatus(String context, String status, String description) {
  gitHubStatus([
    repoSlug:    'Invoca/contextual_logger',
    sha:         env.GIT_COMMIT,
    description: description,
    context:     context,
    targetURL:   env.RUN_DISPLAY_URL,
    token:       env.GITHUB_TOKEN,
    status:      status
  ])
}
